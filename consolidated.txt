- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/cors-middleware.ts
import corsWrapper from 'cors'
import { RequestHandler } from 'express'

/**
 * Hey there you curious :)
 *
 * By default, NextJS APIs are same-site origin only.
 * But since *I needed the main project*
 * to have public API access, I had to configure CORS.
 *
 * @see https://github.com/vercel/next.js/tree/canary/examples/api-routes-cors
 * @see https://github.com/expressjs/cors#configuration-options
 */
const CORS_OPTIONS = {
  methods: ['GET', 'OPTIONS'],
}

function promisifyMiddleware(middleware: RequestHandler) {
  return (req: any, res: any) =>
    new Promise((resolve, reject) => {
      middleware(req, res, (result: Error | unknown) => {
        if (result instanceof Error) {
          return reject(result)
        }
        return resolve(result)
      })
    })
}

// Initialize the cors middleware
const cors = promisifyMiddleware(corsWrapper(CORS_OPTIONS))

export default cors

- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/cors-middleware.ts


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/index.d.ts
type Url = string
type Json =
  | string
  | number
  | boolean
  | null
  | { [property: string]: Json }
  | Json[]

type TProductId = string

type TProductAttributes = {
  description: string
  shape: string
  hardiness: string
  taste: string
}

type TProduct = {
  id: TProductId
  name: string
  sku: string
  price: number
  image: Url
  attributes: TProductAttributes
}

type TAPIAVODetailResponse = TProduct

type TAPIAvoResponse = {
  lenght: number
  data: TProduct[]
  error?: string
}

- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/index.d.ts


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/next-env.d.ts


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/CartItemList/CartItemList.tsx
import React from 'react'
import Link from 'next/link'
import { Item, Button, Loader, Message } from 'semantic-ui-react'
import { CartItemType } from '@store/Cart'

type CartItemListProps = {
  items: CartItemType[]
  removeFromCart: (product: TProduct) => void
  loading?: boolean
}

const CartItemList = ({
  items,
  removeFromCart,
  loading = false,
}: CartItemListProps) => {
  if (loading) return <Loader active inline="centered" />

  if (items.length === 0)
    return (
      <Message warning as="section">
        <Message.Header>Your cart is empty</Message.Header>
        <p>
          You will need to add some items to the cart before you can checkout.
        </p>
      </Message>
    )

  const mapCartItemsToItems = (items: CartItemType[]) =>
    items.map((cartItem) => {
      const { id, name, quantity, price, image } = cartItem

      return {
        childKey: id,
        header: (
          <Link href="/product/[id]" as={`/product/${id}/`} passHref>
            <Item.Header as="a">{name}</Item.Header>
          </Link>
        ),
        image: (
          <Item.Image
            src={image}
            alt={name}
            size="small"
            style={{ background: '#f2f2f2' }}
          />
        ),
        meta: `${quantity} x ${price}`,
        description: 'Some more information goes here....',
        extra: (
          <Button
            basic
            icon="remove"
            floated="right"
            onClick={() => removeFromCart(cartItem)}
          />
        ),
      }
    })

  return <Item.Group divided items={mapCartItemsToItems(items)} as="section" />
}

export default CartItemList

- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/CartItemList/CartItemList.tsx


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/CartSummary/CartSummary.tsx
import React from 'react'
import { Segment, Button } from 'semantic-ui-react'

type CartSummaryProps = {
  totalAmount: number
}

const CartSummary = ({ totalAmount }: CartSummaryProps) => {
  return (
    <Segment clearing size="large" as="section">
      <span>
        <strong>Sub total:</strong>
        {` ${totalAmount}`}
      </span>
      <Button color="black" floated="right">
        Check out
      </Button>
    </Segment>
  )
}

export default CartSummary

- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/CartSummary/CartSummary.tsx


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/KawaiiHeader/AnimatedHeader.tsx
import React from 'react'
import { Header, Transition } from 'semantic-ui-react'

import { Avocado } from '@components/SVGIcons'

type AnimatedHeaderProps = {
  visible: boolean
  onClick: () => void
  onComplete: () => void
}

const AnimatedHeader = ({
  visible,
  onClick,
  onComplete,
}: AnimatedHeaderProps) => (
  <Header size="huge" as="h1" onClick={onClick}>
    Platzi
    <Transition
      animation="jiggle"
      visible={visible}
      duration={900}
      onComplete={onComplete}
    >
      <Avocado size="58px" />
    </Transition>
    Avo
  </Header>
)

export default AnimatedHeader

- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/KawaiiHeader/AnimatedHeader.tsx


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/KawaiiHeader/KawaiiHeader.tsx
import React, { useState, useEffect } from 'react'
import { Confirm } from 'semantic-ui-react'

import PuesVivo from './AnimatedHeader'
import PuesMuero from './RottenHeader'
import ModalHeaderContent from './ModalHeaderContent'

const KawaiiHeader = () => {
  const [visible, setVisible] = useState(true)
  const [meMori, setMeMori] = useState(false)
  const [modalOpen, setModalOpen] = useState(false)
  const [count, setCount] = useState(0)

  const closeModal = () => setModalOpen(false)
  const toggleVisible = () => setVisible((prevVisible) => !prevVisible)

  useEffect(() => {
    window.setTimeout(toggleVisible, 350)
  }, [])

  useEffect(() => {
    if (count === 4) {
      setMeMori(true)
      setModalOpen(true)
    }
  }, [count])

  return (
    <div className="container">
      {meMori ? (
        <PuesMuero />
      ) : (
        <PuesVivo
          visible={visible}
          onClick={toggleVisible}
          onComplete={() => setCount((prevCount) => prevCount + 1)}
        />
      )}

      <Confirm
        open={modalOpen}
        content={ModalHeaderContent}
        onCancel={closeModal}
        onConfirm={closeModal}
        cancelButton="Ay, lo siento"
        confirmButton="OK"
        closeOnDimmerClick={false}
      />

      <style jsx>
        {`
          .container {
            margin: 2rem 0 3rem;
          }
          .container :global(.header) {
            display: flex;
            align-items: center;
            justify-content: center;
          }
        `}
      </style>
    </div>
  )
}

export default KawaiiHeader

- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/KawaiiHeader/KawaiiHeader.tsx


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/KawaiiHeader/ModalHeaderContent.tsx
import React from 'react'
import { Grid, Header } from 'semantic-ui-react'

import { PosMeMuero } from '@components/SVGIcons'

const ModalHeaderContent = () => {
  return (
    <div className="container">
      <Grid columns={2}>
        <Grid.Row verticalAlign={'middle'}>
          <Grid.Column width="5">
            <PosMeMuero size="154px" />
          </Grid.Column>
          <Grid.Column width="11">
            <Header as="h2">Mataste el aguacate</Header>
            <p>Lo tocaste tanto que lo mataste.</p>
            <p>
              Por otro lado, eres una persona muy curiosa y has descubierto
              esto. :)
            </p>
          </Grid.Column>
        </Grid.Row>
      </Grid>

      <style jsx>{`
        .container {
          padding: 2rem;
        }
      `}</style>
    </div>
  )
}

export default ModalHeaderContent

- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/KawaiiHeader/ModalHeaderContent.tsx


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/KawaiiHeader/RottenHeader.tsx
import React from 'react'
import { Header, Transition, Confirm } from 'semantic-ui-react'

import { PosMeMuero } from '@components/SVGIcons'

const RottenHeader = () => (
  <Header size="huge" as="h1">
    Platzi
    <PosMeMuero size="58px" />
    Avo
  </Header>
)

export default RottenHeader

- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/KawaiiHeader/RottenHeader.tsx


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/Layout/Layout.tsx
import React, { PropsWithChildren } from 'react'
import { Container } from 'semantic-ui-react'

import Navbar from '@components/Navbar/Navbar'
//import Footer from '@components/Footer/Footer'

type LayoutProps = {
    children?: React.ReactNode
}

const Layout = ({ children }: LayoutProps) => (
    <>
        <Navbar />
        <Container as="main" text>
            {children}
        </Container>
        {/*         <Footer /> */}
    </>
)

export default Layout
- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/Layout/Layout.tsx


- Inicio del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/Navbar/Navbar.tsx
import React, { useContext } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { Menu, Container } from 'semantic-ui-react'

import { Avocado } from '@components/SVGIcons'
import ShoppingCartIcon from './ShoppingCartIcon'
import { useCart } from '@store/Cart'

const Navbar = () => {
  const { pathname } = useRouter()
  const { count: cartCount } = useCart()

  return (
    <Menu size="huge" borderless pointing as="header">
      <Container text>
        <Link href="/" passHref>
          <Menu.Item
            active={pathname === '/'}
            title="Inicio | Todos los productos"
          >
            <Avocado />
            Avo Store
          </Menu.Item>
        </Link>
        <Menu.Menu position="right">
          <Link href="/cart" passHref>
            <Menu.Item active={pathname === '/cart'}>
              <ShoppingCartIcon cartCount={cartCount} name="Canasta" />
            </Menu.Item>
          </Link>
        </Menu.Menu>
      </Container>
      <style jsx global>{`
        .ui.menu.huge {
          font-size: 1.5rem;
        }
      `}</style>
    </Menu>
  )
}

export default Navbar
- Final del archivo F:/fullStackDeveloper/platzi/platzi-nextjs/components/Navbar/Navbar.tsx

